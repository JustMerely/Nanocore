local a=Instance.new("CanvasGroup")local b=Instance.new("UICorner")local c=Instance.new("TextLabel")local d=Instance.new("UICorner")local e=Instance.new("Frame")local f=Instance.new("ScrollingFrame")local g=Instance.new("TextBox")local h=Instance.new("UIPadding")local i=Instance.new("Frame")local j=Instance.new("UIListLayout")local k=Instance.new("TextButton")local l=Instance.new("UIStroke")local m=Instance.new("UICorner")local n=Instance.new("TextButton")local o=Instance.new("UIStroke")local p=Instance.new("UICorner")local q=Instance.new("UIStroke")local function r()local a=math.random(10,20)local b={}for a=1,a do b[a]=string.char(math.random(32,126))end;return table.concat(b)end;local function s(a)while task.wait()do if a and typeof(a)=="Instance"then a.Name=r()else break end end end;local r=game:GetService("TweenService")local function t(a)if a and type(a)=="userdata"then local b=game:GetService("UserInputService")local c,d,e,f=nil,nil,nil,nil;local function g(b)local b=b.Position-e;local b=UDim2.new(f.X.Scale,f.X.Offset+b.X,f.Y.Scale,f.Y.Offset+b.Y)r:Create(a,TweenInfo.new(0.075),{Position=b}):Play()end;a.InputBegan:Connect(function(d)if(d.UserInputType==Enum.UserInputType.MouseButton1 or d.UserInputType==Enum.UserInputType.Touch)and not b:GetFocusedTextBox()then c=true;e=d.Position;f=a.Position;d.Changed:Connect(function()if d.UserInputState==Enum.UserInputState.End then c=false end end)end end)a.InputChanged:Connect(function(a)if a.UserInputType==Enum.UserInputType.MouseMovement or a.UserInputType==Enum.UserInputType.Touch then d=a end end)b.InputChanged:Connect(function(a)if a==d and c then g(a)end end)end end;local u={}u.OpMode={iABC=0,iABx=1,iAsBx=2}u.SIZE_C=9;u.SIZE_B=9;u.SIZE_Bx=u.SIZE_C+u.SIZE_B;u.SIZE_A=8;u.SIZE_OP=6;u.POS_OP=0;u.POS_A=u.POS_OP+u.SIZE_OP;u.POS_C=u.POS_A+u.SIZE_A;u.POS_B=u.POS_C+u.SIZE_C;u.POS_Bx=u.POS_C;u.MAXARG_Bx=math.ldexp(1,u.SIZE_Bx)-1;u.MAXARG_sBx=math.floor(u.MAXARG_Bx/2)u.MAXARG_A=math.ldexp(1,u.SIZE_A)-1;u.MAXARG_B=math.ldexp(1,u.SIZE_B)-1;u.MAXARG_C=math.ldexp(1,u.SIZE_C)-1;function u:GET_OPCODE(a)return self.ROpCode[a.OP]end;function u:SET_OPCODE(a,b)a.OP=self.OpCode[b]end;function u:GETARG_A(a)return a.A end;function u:SETARG_A(a,b)a.A=b end;function u:GETARG_B(a)return a.B end;function u:SETARG_B(a,b)a.B=b end;function u:GETARG_C(a)return a.C end;function u:SETARG_C(a,b)a.C=b end;function u:GETARG_Bx(a)return a.Bx end;function u:SETARG_Bx(a,b)a.Bx=b end;function u:GETARG_sBx(a)return a.Bx-self.MAXARG_sBx end;function u:SETARG_sBx(a,b)a.Bx=b+self.MAXARG_sBx end;function u:CREATE_ABC(a,b,c,d)return{OP=self.OpCode[a],A=b,B=c,C=d}end;function u:CREATE_ABx(a,b,c)return{OP=self.OpCode[a],A=b,Bx=c}end;function u:CREATE_Inst(a)local b=a%64;a=(a-b)/64;local c=a%256;a=(a-c)/256;return self:CREATE_ABx(b,c,a)end;function u:Instruction(a)if a.Bx then a.C=a.Bx%512;a.B=(a.Bx-a.C)/512 end;local b=a.A*64+a.OP;local c=b%256;b=a.C*64+(b-c)/256;local d=b%256;b=a.B*128+(b-d)/256;local a=b%256;local b=(b-a)/256;return string.char(c,d,a,b)end;function u:DecodeInst(a)local b=string.byte;local c={}local d=b(a,1)local e=d%64;c.OP=e;d=b(a,2)*4+(d-e)/64;local f=d%256;c.A=f;d=b(a,3)*4+(d-f)/256;local f=d%512;c.C=f;c.B=b(a,4)*2+(d-f)/512;local a=self.OpMode[tonumber(string.sub(self.opmodes[e+1],7,7))]if a~="iABC"then c.Bx=c.B*512+c.C end;return c end;u.BITRK=math.ldexp(1,u.SIZE_B-1)function u:ISK(a)return a>=self.BITRK end;function u:INDEXK(a)return a-self.BITRK end;u.MAXINDEXRK=u.BITRK-1;function u:RKASK(a)return a+self.BITRK end;u.NO_REG=u.MAXARG_A;u.opnames={}u.OpCode={}u.ROpCode={}local v=0;for a in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]],"%S+")do local b="OP_"..a;u.opnames[v]=a;u.OpCode[b]=v;u.ROpCode[v]=b;v=v+1 end;u.NUM_OPCODES=v;u.OpArgMask={OpArgN=0,OpArgU=1,OpArgR=2,OpArgK=3}function u:getOpMode(a)return self.opmodes[self.OpCode[a]]%4 end;function u:getBMode(a)return math.floor(self.opmodes[self.OpCode[a]]/16)%4 end;function u:getCMode(a)return math.floor(self.opmodes[self.OpCode[a]]/4)%4 end;function u:testAMode(a)return math.floor(self.opmodes[self.OpCode[a]]/64)%2 end;function u:testTMode(a)return math.floor(self.opmodes[self.OpCode[a]]/128)end;u.LFIELDS_PER_FLUSH=50;local function v(a,b,c,d,e)local f=u;return a*128+b*64+f.OpArgMask[c]*16+f.OpArgMask[d]*4+f.OpMode[e]end;u.opmodes={v(0,1,"OpArgK","OpArgN","iABx"),v(0,1,"OpArgU","OpArgU","iABC"),v(0,1,"OpArgR","OpArgN","iABC"),v(0,1,"OpArgU","OpArgN","iABC"),v(0,1,"OpArgK","OpArgN","iABx"),v(0,1,"OpArgR","OpArgK","iABC"),v(0,0,"OpArgK","OpArgN","iABx"),v(0,0,"OpArgU","OpArgN","iABC"),v(0,0,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgU","OpArgU","iABC"),v(0,1,"OpArgR","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgK","OpArgK","iABC"),v(0,1,"OpArgR","OpArgN","iABC"),v(0,1,"OpArgR","OpArgN","iABC"),v(0,1,"OpArgR","OpArgN","iABC"),v(0,1,"OpArgR","OpArgR","iABC"),v(0,0,"OpArgR","OpArgN","iAsBx"),v(1,0,"OpArgK","OpArgK","iABC"),v(1,0,"OpArgK","OpArgK","iABC"),v(1,0,"OpArgK","OpArgK","iABC"),v(1,1,"OpArgR","OpArgU","iABC"),v(1,1,"OpArgR","OpArgU","iABC"),v(0,1,"OpArgU","OpArgU","iABC"),v(0,1,"OpArgU","OpArgU","iABC"),v(0,0,"OpArgU","OpArgN","iABC"),v(0,1,"OpArgR","OpArgN","iAsBx"),v(0,1,"OpArgR","OpArgN","iAsBx"),v(1,0,"OpArgN","OpArgU","iABC"),v(0,0,"OpArgU","OpArgU","iABC"),v(0,0,"OpArgN","OpArgN","iABC"),v(0,1,"OpArgU","OpArgN","iABx"),v(0,1,"OpArgU","OpArgN","iABC")}u.opmodes[0]=v(0,1,"OpArgR","OpArgN","iABC")local v={}function v:make_getS(a)local a=a;return function()if not a then return nil end;local b=a;a=nil;return b end end;function v:init(a,b,c)if not a then return end;local d={}d.reader=a;d.data=b or""d.name=c;if not b or b==""then d.n=0 else d.n=#b end;d.p=0;return d end;function v:fill(a)local b=a.reader()a.data=b;if not b or b==""then return"EOZ"end;a.n,a.p=#b-1,1;return string.sub(b,1,1)end;function v:zgetc(a)local b,c=a.n,a.p+1;if b>0 then a.n,a.p=b-1,c;return string.sub(a.data,c,c)else return self:fill(a)end end;local w={}w.LUA_SIGNATURE="\27Lua"w.LUA_TNUMBER=3;w.LUA_TSTRING=4;w.LUA_TNIL=0;w.LUA_TBOOLEAN=1;w.LUA_TNONE=-1;w.LUAC_VERSION=81;w.LUAC_FORMAT=0;w.LUAC_HEADERSIZE=12;function w:make_setS()local a={}a.data=""local b=function(a,b)if not a then return 0 end;b.data=b.data..a;return 0 end;return b,a end;function w:ttype(a)local a=type(a.value)if a=="number"then return self.LUA_TNUMBER elseif a=="string"then return self.LUA_TSTRING elseif a=="nil"then return self.LUA_TNIL elseif a=="boolean"then return self.LUA_TBOOLEAN else return self.LUA_TNONE end end;function w:from_double(a)local function b(a)local b=a%256;return(a-b)/256,string.char(b)end;local c=0;if a<0 then c=1;a=-a end;local d,e=math.frexp(a)if a==0 then d,e=0,0 elseif a==1/0 then d,e=0,2047 else d=(d*2-1)*math.ldexp(0.5,53)e=e+1022 end;local f,g=""a=math.floor(d)for c=1,6 do a,g=b(a)f=f..g end;a,g=b(e*16+a)f=f..g;a,g=b(c*128+a)f=f..g;return f end;function w:from_int(a)local b=""a=math.floor(a)if a<0 then a=4294967296+a end;for c=1,4 do local c=a%256;b=b..string.char(c)a=math.floor(a/256)end;return b end;function w:DumpBlock(a,b)if b.status==0 then b.status=b.write(a,b.data)end end;function w:DumpChar(a,b)self:DumpBlock(string.char(a),b)end;function w:DumpInt(a,b)self:DumpBlock(self:from_int(a),b)end;function w:DumpNumber(a,b)self:DumpBlock(self:from_double(a),b)end;function w:DumpString(a,b)if a==nil then self:DumpInt(0,b)else a=a.."\0"self:DumpInt(#a,b)self:DumpBlock(a,b)end end;function w:DumpCode(a,b)local c=a.sizecode;self:DumpInt(c,b)for c=0,c-1 do self:DumpBlock(u:Instruction(a.code[c]),b)end end;function w:DumpConstants(a,b)local c=a.sizek;self:DumpInt(c,b)for c=0,c-1 do local a=a.k[c]local c=self:ttype(a)self:DumpChar(c,b)if c==self.LUA_TNIL then elseif c==self.LUA_TBOOLEAN then self:DumpChar(a.value and 1 or 0,b)elseif c==self.LUA_TNUMBER then self:DumpNumber(a.value,b)elseif c==self.LUA_TSTRING then self:DumpString(a.value,b)else end end;c=a.sizep;self:DumpInt(c,b)for c=0,c-1 do self:DumpFunction(a.p[c],a.source,b)end end;function w:DumpDebug(a,b)local c;c=b.strip and 0 or a.sizelineinfo;self:DumpInt(c,b)for c=0,c-1 do self:DumpInt(a.lineinfo[c],b)end;c=b.strip and 0 or a.sizelocvars;self:DumpInt(c,b)for c=0,c-1 do self:DumpString(a.locvars[c].varname,b)self:DumpInt(a.locvars[c].startpc,b)self:DumpInt(a.locvars[c].endpc,b)end;c=b.strip and 0 or a.sizeupvalues;self:DumpInt(c,b)for c=0,c-1 do self:DumpString(a.upvalues[c],b)end end;function w:DumpFunction(a,b,c)local d=a.source;if d==b or c.strip then d=nil end;self:DumpString(d,c)self:DumpInt(a.lineDefined,c)self:DumpInt(a.lastlinedefined,c)self:DumpChar(a.nups,c)self:DumpChar(a.numparams,c)self:DumpChar(a.is_vararg,c)self:DumpChar(a.maxstacksize,c)self:DumpCode(a,c)self:DumpConstants(a,c)self:DumpDebug(a,c)end;function w:DumpHeader(a)local b=self:header()assert(#b==self.LUAC_HEADERSIZE)self:DumpBlock(b,a)end;function w:header()local a=1;return self.LUA_SIGNATURE..string.char(self.LUAC_VERSION,self.LUAC_FORMAT,a,4,4,4,8,0)end;function w:dump(a,b,c,d,e)local f={}f.L=a;f.write=c;f.data=d;f.strip=e;f.status=0;self:DumpHeader(f)self:DumpFunction(b,nil,f)f.write(nil,f.data)return f.status end;local x={}x.RESERVED=[[
TK_AND and
TK_BREAK break
TK_CONTINUE continue
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_ASSIGN_ADD +=
TK_ASSIGN_SUB -=
TK_ASSIGN_MUL *=
TK_ASSIGN_DIV /=
TK_ASSIGN_MOD %=
TK_ASSIGN_POW ^=
TK_ASSIGN_CONCAT ..=
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]x.MAXSRC=80;x.MAX_INT=2147483645;x.LUA_QS="'%s'"x.LUA_COMPAT_LSTR=1;function x:init()local a,b={},{}for c in string.gmatch(self.RESERVED,"[^\n]+")do local c,c,c,d=string.find(c,"(%S+)%s+(%S+)")a[c]=d;b[d]=c end;self.tokens=a;self.enums=b end;function x:chunkid(a,b)local c;local d=string.sub(a,1,1)if d=="="then c=string.sub(a,2,b)else if d=="@"then a=string.sub(a,2)b=b-#" '...' "local d=#a;c=""if d>b then a=string.sub(a,1+d-b)c=c.."..."end;c=c..a else local d=string.find(a,"[\n\r]")d=d and(d-1)or#a;b=b-#(" [string \"...\"] ")if d>b then d=b end;c="[string \""if d<#a then c=c..string.sub(a,1,d).."..."else c=c..a end;c=c.."\"]"end end;return c end;function x:token2str(a,a)if string.sub(a,1,3)~="TK_"then if string.find(a,"%c")then return string.format("char(%d)",string.byte(a))end;return a else end;return self.tokens[a]end;function x:lexerror(a,b,c)local function d(a,b)if b=="TK_NAME"or b=="TK_STRING"or b=="TK_NUMBER"then return a.buff else return self:token2str(a,b)end end;local e=self:chunkid(a.source,self.MAXSRC)local b=string.format("%s:%d: %s",e,a.linenumber,b)if c then b=string.format("%s near "..self.LUA_QS,b,d(a,c))end;error(b)end;function x:syntaxerror(a,b)self:lexerror(a,b,a.t.token)end;function x:currIsNewline(a)return a.current=="\n"or a.current=="\r"end;function x:inclinenumber(a)local b=a.current;self:nextc(a)if self:currIsNewline(a)and a.current~=b then self:nextc(a)end;a.linenumber=a.linenumber+1;if a.linenumber>=self.MAX_INT then self:syntaxerror(a,"chunk has too many lines")end end;function x:setinput(a,b,c,d)if not b then b={}end;if not b.lookahead then b.lookahead={}end;if not b.t then b.t={}end;b.decpoint="."b.L=a;b.lookahead.token="TK_EOS"b.z=c;b.fs=nil;b.linenumber=1;b.lastline=1;b.source=d;self:nextc(b)end;function x:check_next(a,b)if not string.find(b,a.current,1,1)then return false end;self:save_and_next(a)return true end;function x:next(a)a.lastline=a.linenumber;if a.lookahead.token~="TK_EOS"then a.t.seminfo=a.lookahead.seminfo;a.t.token=a.lookahead.token;a.lookahead.token="TK_EOS"else a.t.token=self:llex(a,a.t)end end;function x:lookahead(a)a.lookahead.token=self:llex(a,a.lookahead)end;function x:nextc(a)local b=v:zgetc(a.z)a.current=b;return b end;function x:save(a,b)local c=a.buff;a.buff=c..b end;function x:save_and_next(a)self:save(a,a.current)return self:nextc(a)end;function x:str2d(a)if string.match(string.lower(a),"[^b%da-f_]_")or string.match(string.lower(a),"_[^%da-f_]")then return nil end;a=string.gsub(a,"_","")local b=tonumber(a)if b then return b end;if string.lower(string.sub(a,1,2))=="0x"then b=tonumber(a,16)if b then return b end elseif string.lower(string.sub(a,1,2))=="0b"then if string.match(string.sub(a,3),"[^01]")then return nil end;local a=string.reverse(string.sub(a,3))local b=0;for c=1,string.len(a)do local a=string.sub(a,c,c)=="1"and 1 or 0;b=b+a*math.pow(2,c-1)end;return b end;return nil end;function x:buffreplace(a,b,c)local d,e="",a.buff;for a=1,#e do local a=string.sub(e,a,a)if a==b then a=c end;d=d..a end;a.buff=d end;function x:trydecpoint(a,b)local c=a.decpoint;self:buffreplace(a,c,a.decpoint)local c=self:str2d(a.buff)b.seminfo=c;if not c then self:buffreplace(a,a.decpoint,".")self:lexerror(a,"malformed number","TK_NUMBER")end end;function x:read_numeral(a,b)repeat self:save_and_next(a)until string.find(a.current,"%D")and a.current~="."if self:check_next(a,"Ee")then self:check_next(a,"+-")end;while string.find(a.current,"^%w$")or a.current=="_"do self:save_and_next(a)end;self:buffreplace(a,".",a.decpoint)local c=self:str2d(a.buff)b.seminfo=c;if not c then self:trydecpoint(a,b)end end;function x:skip_sep(a)local b=0;local c=a.current;self:save_and_next(a)while a.current=="="do self:save_and_next(a)b=b+1 end;return(a.current==c)and b or(-b)-1 end;function x:read_long_string(a,b,c)local d=0;self:save_and_next(a)if self:currIsNewline(a)then self:inclinenumber(a)end;while true do local e=a.current;if e=="EOZ"then self:lexerror(a,b and"unfinished long string"or"unfinished long comment","TK_EOS")elseif e=="["then if self.LUA_COMPAT_LSTR then if self:skip_sep(a)==c then self:save_and_next(a)d=d+1;if self.LUA_COMPAT_LSTR==1 then if c==0 then self:lexerror(a,"nesting of [[...]] is deprecated","[")end end end end elseif e=="]"then if self:skip_sep(a)==c then self:save_and_next(a)if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR==2 then d=d-1;if c==0 and d>=0 then break end end;break end elseif self:currIsNewline(a)then self:save(a,"\n")self:inclinenumber(a)if not b then a.buff=""end else if b then self:save_and_next(a)else self:nextc(a)end end end;if b then local c=3+c;b.seminfo=string.sub(a.buff,c,-c)end end;function x:read_string(a,b,c)self:save_and_next(a)while a.current~=b do local c=a.current;if c=="EOZ"then self:lexerror(a,"unfinished string","TK_EOS")elseif self:currIsNewline(a)then self:lexerror(a,"unfinished string","TK_STRING")elseif c=="\\"then c=self:nextc(a)if self:currIsNewline(a)then self:save(a,"\n")self:inclinenumber(a)elseif c~="EOZ"then local d=string.find("abfnrtv",c,1,1)if d then self:save(a,string.sub("\a\b\f\n\r\t\v",d,d))self:nextc(a)elseif c=="u"then assert(utf8 and utf8.char,"No utf8 library found! Cannot decode UTF8 string literal!")if self:nextc(a)~="{"then self:lexerror("Sounds like a skill issue","TK_STRING")end;local b=""while true do c=self:nextc(a)if c=="}"then break elseif string.match(c,"%x")then b=b..c else self:lexerror(string.format("Invalid unicode character sequence. Expected alphanumeric character, got %s. Did you forget to close the code sequence with a curly bracket?",c),"TK_STRING")end end;if not tonumber(b,16)or not utf8.char(tonumber(b,16))then self:lexerror(string.format("Invalid UTF8 char %s. Expected a valid UTF8 character code",b),"TK_STRING")else self:save(a,utf8.char(tonumber(b)))end elseif string.lower(c)=="x"then local b=self:nextc(a)..self:nextc(a)if not string.match(string.upper(b),"%x")then self:lexerror(string.format("Invalid hex string literal. Expected valid string literal, got %s",b),"TK_STRING")else self:save(a,string.char(tonumber(b,16)))end elseif string.lower(c)=="z"then local c=x:nextc(a)if c==b then break else self:save(a,c)end elseif not string.find(c,"%d")then self:save_and_next(a)else c,d=0,0;repeat c=10*c+a.current;self:nextc(a)d=d+1 until d>=3 or not string.find(a.current,"%d")if c>255 then self:lexerror(a,"escape sequence too large","TK_STRING")end;self:save(a,string.char(c))end end else self:save_and_next(a)end end;self:save_and_next(a)c.seminfo=string.sub(a.buff,2,-2)end;function x:llex(a,b)a.buff=""while true do local c=a.current;if self:currIsNewline(a)then self:inclinenumber(a)elseif c=="-"then c=self:nextc(a)if c=="="then self:nextc(a)return"TK_ASSIGN_SUB"elseif c~="-"then return"-"end;local b=-1;if self:nextc(a)=='['then b=self:skip_sep(a)a.buff=""end;if b>=0 then self:read_long_string(a,nil,b)a.buff=""else while not self:currIsNewline(a)and a.current~="EOZ"do self:nextc(a)end end elseif c=="["then local c=self:skip_sep(a)if c>=0 then self:read_long_string(a,b,c)return"TK_STRING"elseif c==-1 then return"["else self:lexerror(a,"invalid long string delimiter","TK_STRING")end elseif c=="+"then c=self:nextc(a)if c~="="then return"+"else self:nextc(a)return"TK_ASSIGN_ADD"end elseif c=="*"then c=self:nextc(a)if c~="="then return"*"else self:nextc(a)return"TK_ASSIGN_MUL"end elseif c=="/"then c=self:nextc(a)if c~="="then return"/"else self:nextc(a)return"TK_ASSIGN_DIV"end elseif c=="%"then c=self:nextc(a)if c~="="then return"%"else self:nextc(a)return"TK_ASSIGN_MOD"end elseif c=="^"then c=self:nextc(a)if c~="="then return"^"else self:nextc(a)return"TK_ASSIGN_POW"end elseif c=="="then c=self:nextc(a)if c~="="then return"="else self:nextc(a)return"TK_EQ"end elseif c=="<"then c=self:nextc(a)if c~="="then return"<"else self:nextc(a)return"TK_LE"end elseif c==">"then c=self:nextc(a)if c~="="then return">"else self:nextc(a)return"TK_GE"end elseif c=="~"then c=self:nextc(a)if c~="="then return"~"else self:nextc(a)return"TK_NE"end elseif c=="\""or c=="'"then self:read_string(a,c,b)return"TK_STRING"elseif c=="."then c=self:save_and_next(a)if self:check_next(a,".")then if self:check_next(a,".")then return"TK_DOTS"else return"TK_CONCAT"end elseif not string.find(c,"%d")then return"."else self:read_numeral(a,b)return"TK_NUMBER"end elseif c=="EOZ"then return"TK_EOS"else if string.find(c,"%s")then self:nextc(a)elseif string.find(c,"%d")then self:read_numeral(a,b)return"TK_NUMBER"elseif string.find(c,"[_%a]")then repeat c=self:save_and_next(a)until c=="EOZ"or not string.find(c,"[_%w]")local a=a.buff;local c=self.enums[a]if c then return c end;b.seminfo=a;return"TK_NAME"else self:nextc(a)return c end end end end;local y;local z={}z.MAXSTACK=250;function z:ttisnumber(a)if a then return type(a.value)=="number"else return false end end;function z:nvalue(a)return a.value end;function z:setnilvalue(a)a.value=nil end;function z:setsvalue(a,b)a.value=b end;z.setnvalue=z.setsvalue;z.sethvalue=z.setsvalue;z.setbvalue=z.setsvalue;function z:numadd(a,b)return a+b end;function z:numsub(a,b)return a-b end;function z:nummul(a,b)return a*b end;function z:numdiv(a,b)return a/b end;function z:nummod(a,b)return a%b end;function z:numpow(a,b)return a^b end;function z:numunm(a)return-a end;function z:numisnan(a)return not a==a end;z.NO_JUMP=-1;z.BinOpr={OPR_ADD=0,OPR_SUB=1,OPR_MUL=2,OPR_DIV=3,OPR_MOD=4,OPR_POW=5,OPR_CONCAT=6,OPR_NE=7,OPR_EQ=8,OPR_LT=9,OPR_LE=10,OPR_GT=11,OPR_GE=12,OPR_AND=13,OPR_OR=14,OPR_NOBINOPR=15}z.UnOpr={OPR_MINUS=0,OPR_NOT=1,OPR_LEN=2,OPR_NOUNOPR=3}function z:getcode(a,b)return a.f.code[b.info]end;function z:codeAsBx(a,b,c,d)return self:codeABx(a,b,c,d+u.MAXARG_sBx)end;function z:setmultret(a,b)self:setreturns(a,b,y.LUA_MULTRET)end;function z:hasjumps(a)return a.t~=a.f end;function z:isnumeral(a)return a.k=="VKNUM"and a.t==self.NO_JUMP and a.f==self.NO_JUMP end;function z:_nil(a,b,c)if a.pc>a.lasttarget then if a.pc==0 then if b>=a.nactvar then return end else local a=a.f.code[a.pc-1]if u:GET_OPCODE(a)=="OP_LOADNIL"then local d=u:GETARG_A(a)local e=u:GETARG_B(a)if d<=b and b<=e+1 then if b+c-1>e then u:SETARG_B(a,b+c-1)end;return end end end end;self:codeABC(a,"OP_LOADNIL",b,b+c-1,0)end;function z:jump(a)local b=a.jpc;a.jpc=self.NO_JUMP;local c=self:codeAsBx(a,"OP_JMP",0,self.NO_JUMP)c=self:concat(a,c,b)return c end;function z:ret(a,b,c)self:codeABC(a,"OP_RETURN",b,c+1,0)end;function z:condjump(a,b,c,d,e)self:codeABC(a,b,c,d,e)return self:jump(a)end;function z:fixjump(a,b,c)local d=a.f.code[b]local b=c-(b+1)assert(c~=self.NO_JUMP)if math.abs(b)>u.MAXARG_sBx then x:syntaxerror(a.ls,"control structure too long")end;u:SETARG_sBx(d,b)end;function z:getlabel(a)a.lasttarget=a.pc;return a.pc end;function z:getjump(a,b)local a=u:GETARG_sBx(a.f.code[b])if a==self.NO_JUMP then return self.NO_JUMP else return(b+1)+a end end;function z:getjumpcontrol(a,b)local c=a.f.code[b]local a=a.f.code[b-1]if b>=1 and u:testTMode(u:GET_OPCODE(a))~=0 then return a else return c end end;function z:need_value(a,b)while b~=self.NO_JUMP do local c=self:getjumpcontrol(a,b)if u:GET_OPCODE(c)~="OP_TESTSET"then return true end;b=self:getjump(a,b)end;return false end;function z:patchtestreg(a,b,c)local a=self:getjumpcontrol(a,b)if u:GET_OPCODE(a)~="OP_TESTSET"then return false end;if c~=u.NO_REG and c~=u:GETARG_B(a)then u:SETARG_A(a,c)else u:SET_OPCODE(a,"OP_TEST")local b=u:GETARG_B(a)u:SETARG_A(a,b)u:SETARG_B(a,0)end;return true end;function z:removevalues(a,b)while b~=self.NO_JUMP do self:patchtestreg(a,b,u.NO_REG)b=self:getjump(a,b)end end;function z:patchlistaux(a,b,c,d,e)while b~=self.NO_JUMP do local f=self:getjump(a,b)if self:patchtestreg(a,b,d)then self:fixjump(a,b,c)else self:fixjump(a,b,e)end;b=f end end;function z:dischargejpc(a)self:patchlistaux(a,a.jpc,a.pc,u.NO_REG,a.pc)a.jpc=self.NO_JUMP end;function z:patchlist(a,b,c)if c==a.pc then self:patchtohere(a,b)else assert(c<a.pc)self:patchlistaux(a,b,c,u.NO_REG,c)end end;function z:patchtohere(a,b)self:getlabel(a)a.jpc=self:concat(a,a.jpc,b)end;function z:concat(a,b,c)if c==self.NO_JUMP then return b elseif b==self.NO_JUMP then return c else local b=b;local d=self:getjump(a,b)while d~=self.NO_JUMP do b=d;d=self:getjump(a,b)end;self:fixjump(a,b,c)end;return b end;function z:checkstack(a,b)local b=a.freereg+b;if b>a.f.maxstacksize then if b>=self.MAXSTACK then x:syntaxerror(a.ls,"function or expression too complex")end;a.f.maxstacksize=b end end;function z:reserveregs(a,b)self:checkstack(a,b)a.freereg=a.freereg+b end;function z:freereg(a,b)if not u:ISK(b)and b>=a.nactvar then a.freereg=a.freereg-1;assert(b==a.freereg)end end;function z:freeexp(a,b)if b.k=="VNONRELOC"then self:freereg(a,b.info)end end;function z:addk(a,b,c)local d=a.L;local e=a.h[b.value]local f=a.f;if self:ttisnumber(e)then return self:nvalue(e)else e={}self:setnvalue(e,a.nk)a.h[b.value]=e;y:growvector(d,f.k,a.nk,f.sizek,nil,u.MAXARG_Bx,"constant table overflow")f.k[a.nk]=c;local b=a.nk;a.nk=a.nk+1;return b end end;function z:stringK(a,b)local c={}self:setsvalue(c,b)return self:addk(a,c,c)end;function z:numberK(a,b)local c={}self:setnvalue(c,b)return self:addk(a,c,c)end;function z:boolK(a,b)local c={}self:setbvalue(c,b)return self:addk(a,c,c)end;function z:nilK(a)local b,c={},{}self:setnilvalue(c)self:sethvalue(b,a.h)return self:addk(a,b,c)end;function z:setreturns(a,b,c)if b.k=="VCALL"then u:SETARG_C(self:getcode(a,b),c+1)elseif b.k=="VVARARG"then u:SETARG_B(self:getcode(a,b),c+1)u:SETARG_A(self:getcode(a,b),a.freereg)z:reserveregs(a,1)end end;function z:setoneret(a,b)if b.k=="VCALL"then b.k="VNONRELOC"b.info=u:GETARG_A(self:getcode(a,b))elseif b.k=="VVARARG"then u:SETARG_B(self:getcode(a,b),2)b.k="VRELOCABLE"end end;function z:dischargevars(a,b)local c=b.k;if c=="VLOCAL"then b.k="VNONRELOC"elseif c=="VUPVAL"then b.info=self:codeABC(a,"OP_GETUPVAL",0,b.info,0)b.k="VRELOCABLE"elseif c=="VGLOBAL"then b.info=self:codeABx(a,"OP_GETGLOBAL",0,b.info)b.k="VRELOCABLE"elseif c=="VINDEXED"then self:freereg(a,b.aux)self:freereg(a,b.info)b.info=self:codeABC(a,"OP_GETTABLE",0,b.info,b.aux)b.k="VRELOCABLE"elseif c=="VVARARG"or c=="VCALL"then self:setoneret(a,b)else end end;function z:code_label(a,b,c,d)self:getlabel(a)return self:codeABC(a,"OP_LOADBOOL",b,c,d)end;function z:discharge2reg(a,b,c)self:dischargevars(a,b)local d=b.k;if d=="VNIL"then self:_nil(a,c,1)elseif d=="VFALSE"or d=="VTRUE"then self:codeABC(a,"OP_LOADBOOL",c,(b.k=="VTRUE")and 1 or 0,0)elseif d=="VK"then self:codeABx(a,"OP_LOADK",c,b.info)elseif d=="VKNUM"then self:codeABx(a,"OP_LOADK",c,self:numberK(a,b.nval))elseif d=="VRELOCABLE"then local a=self:getcode(a,b)u:SETARG_A(a,c)elseif d=="VNONRELOC"then if c~=b.info then self:codeABC(a,"OP_MOVE",c,b.info,0)end else assert(b.k=="VVOID"or b.k=="VJMP")return end;b.info=c;b.k="VNONRELOC"end;function z:discharge2anyreg(a,b)if b.k~="VNONRELOC"then self:reserveregs(a,1)self:discharge2reg(a,b,a.freereg-1)end end;function z:exp2reg(a,b,c)self:discharge2reg(a,b,c)if b.k=="VJMP"then b.t=self:concat(a,b.t,b.info)end;if self:hasjumps(b)then local d;local e=self.NO_JUMP;local f=self.NO_JUMP;if self:need_value(a,b.t)or self:need_value(a,b.f)then local b=(b.k=="VJMP")and self.NO_JUMP or self:jump(a)e=self:code_label(a,c,0,1)f=self:code_label(a,c,1,0)self:patchtohere(a,b)end;d=self:getlabel(a)self:patchlistaux(a,b.f,d,c,e)self:patchlistaux(a,b.t,d,c,f)end;b.f,b.t=self.NO_JUMP,self.NO_JUMP;b.info=c;b.k="VNONRELOC"end;function z:exp2nextreg(a,b)self:dischargevars(a,b)self:freeexp(a,b)self:reserveregs(a,1)self:exp2reg(a,b,a.freereg-1)end;function z:exp2anyreg(a,b)self:dischargevars(a,b)if b.k=="VNONRELOC"then if not self:hasjumps(b)then return b.info end;if b.info>=a.nactvar then self:exp2reg(a,b,b.info)return b.info end end;self:exp2nextreg(a,b)return b.info end;function z:exp2val(a,b)if self:hasjumps(b)then self:exp2anyreg(a,b)else self:dischargevars(a,b)end end;function z:exp2RK(a,b)self:exp2val(a,b)local c=b.k;if c=="VKNUM"or c=="VTRUE"or c=="VFALSE"or c=="VNIL"then if a.nk<=u.MAXINDEXRK then if b.k=="VNIL"then b.info=self:nilK(a)else b.info=(b.k=="VKNUM")and self:numberK(a,b.nval)or self:boolK(a,b.k=="VTRUE")end;b.k="VK"return u:RKASK(b.info)end elseif c=="VK"then if b.info<=u.MAXINDEXRK then return u:RKASK(b.info)end else end;return self:exp2anyreg(a,b)end;function z:storevar(a,b,c)local d=b.k;if d=="VLOCAL"then self:freeexp(a,c)self:exp2reg(a,c,b.info)return elseif d=="VUPVAL"then local c=self:exp2anyreg(a,c)self:codeABC(a,"OP_SETUPVAL",c,b.info,0)elseif d=="VGLOBAL"then local c=self:exp2anyreg(a,c)self:codeABx(a,"OP_SETGLOBAL",c,b.info)elseif d=="VINDEXED"then local c=self:exp2RK(a,c)self:codeABC(a,"OP_SETTABLE",b.info,b.aux,c)else assert(0)end;self:freeexp(a,c)end;function z:_self(a,b,c)self:exp2anyreg(a,b)self:freeexp(a,b)local d=a.freereg;self:reserveregs(a,2)self:codeABC(a,"OP_SELF",d,b.info,self:exp2RK(a,c))self:freeexp(a,c)b.info=d;b.k="VNONRELOC"end;function z:invertjump(a,b)local a=self:getjumpcontrol(a,b.info)assert(u:testTMode(u:GET_OPCODE(a))~=0 and u:GET_OPCODE(a)~="OP_TESTSET"and u:GET_OPCODE(a)~="OP_TEST")u:SETARG_A(a,(u:GETARG_A(a)==0)and 1 or 0)end;function z:jumponcond(a,b,c)if b.k=="VRELOCABLE"then local b=self:getcode(a,b)if u:GET_OPCODE(b)=="OP_NOT"then a.pc=a.pc-1;return self:condjump(a,"OP_TEST",u:GETARG_B(b),0,c and 0 or 1)end end;self:discharge2anyreg(a,b)self:freeexp(a,b)return self:condjump(a,"OP_TESTSET",u.NO_REG,b.info,c and 1 or 0)end;function z:goiftrue(a,b)local c;self:dischargevars(a,b)local d=b.k;if d=="VK"or d=="VKNUM"or d=="VTRUE"then c=self.NO_JUMP elseif d=="VFALSE"then c=self:jump(a)elseif d=="VJMP"then self:invertjump(a,b)c=b.info else c=self:jumponcond(a,b,false)end;b.f=self:concat(a,b.f,c)self:patchtohere(a,b.t)b.t=self.NO_JUMP end;function z:goiffalse(a,b)local c;self:dischargevars(a,b)local d=b.k;if d=="VNIL"or d=="VFALSE"then c=self.NO_JUMP elseif d=="VTRUE"then c=self:jump(a)elseif d=="VJMP"then c=b.info else c=self:jumponcond(a,b,true)end;b.t=self:concat(a,b.t,c)self:patchtohere(a,b.f)b.f=self.NO_JUMP end;function z:codenot(a,b)self:dischargevars(a,b)local c=b.k;if c=="VNIL"or c=="VFALSE"then b.k="VTRUE"elseif c=="VK"or c=="VKNUM"or c=="VTRUE"then b.k="VFALSE"elseif c=="VJMP"then self:invertjump(a,b)elseif c=="VRELOCABLE"or c=="VNONRELOC"then self:discharge2anyreg(a,b)self:freeexp(a,b)b.info=self:codeABC(a,"OP_NOT",0,b.info,0)b.k="VRELOCABLE"else assert(0)end;b.f,b.t=b.t,b.f;self:removevalues(a,b.f)self:removevalues(a,b.t)end;function z:indexed(a,b,c)b.aux=self:exp2RK(a,c)b.k="VINDEXED"end;function z:constfolding(a,b,c)local d;if not self:isnumeral(b)or not self:isnumeral(c)then return false end;local e=b.nval;local c=c.nval;if a=="OP_ADD"then d=self:numadd(e,c)elseif a=="OP_SUB"then d=self:numsub(e,c)elseif a=="OP_MUL"then d=self:nummul(e,c)elseif a=="OP_DIV"then if c==0 then return false end;d=self:numdiv(e,c)elseif a=="OP_MOD"then if c==0 then return false end;d=self:nummod(e,c)elseif a=="OP_POW"then d=self:numpow(e,c)elseif a=="OP_UNM"then d=self:numunm(e)elseif a=="OP_LEN"then return false else assert(0)d=0 end;if self:numisnan(d)then return false end;b.nval=d;return true end;function z:codearith(a,b,c,d)if self:constfolding(b,c,d)then return else local e=(b~="OP_UNM"and b~="OP_LEN")and self:exp2RK(a,d)or 0;local f=self:exp2RK(a,c)if f>e then self:freeexp(a,c)self:freeexp(a,d)else self:freeexp(a,d)self:freeexp(a,c)end;c.info=self:codeABC(a,b,0,f,e)c.k="VRELOCABLE"end end;function z:codecomp(a,b,c,d,e)local f=self:exp2RK(a,d)local g=self:exp2RK(a,e)self:freeexp(a,e)self:freeexp(a,d)if c==0 and b~="OP_EQ"then f,g=g,f;c=1 end;d.info=self:condjump(a,b,c,f,g)d.k="VJMP"end;function z:prefix(a,b,c)local d={}d.t,d.f=self.NO_JUMP,self.NO_JUMP;d.k="VKNUM"d.nval=0;if b=="OPR_MINUS"then if not self:isnumeral(c)then self:exp2anyreg(a,c)end;self:codearith(a,"OP_UNM",c,d)elseif b=="OPR_NOT"then self:codenot(a,c)elseif b=="OPR_LEN"then self:exp2anyreg(a,c)self:codearith(a,"OP_LEN",c,d)else assert(0)end end;function z:infix(a,b,c)if b=="OPR_AND"then self:goiftrue(a,c)elseif b=="OPR_OR"then self:goiffalse(a,c)elseif b=="OPR_CONCAT"then self:exp2nextreg(a,c)elseif b=="OPR_ADD"or b=="OPR_SUB"or b=="OPR_MUL"or b=="OPR_DIV"or b=="OPR_MOD"or b=="OPR_POW"then if not self:isnumeral(c)then self:exp2RK(a,c)end else self:exp2RK(a,c)end end;z.arith_op={OPR_ADD="OP_ADD",OPR_SUB="OP_SUB",OPR_MUL="OP_MUL",OPR_DIV="OP_DIV",OPR_MOD="OP_MOD",OPR_POW="OP_POW"}z.comp_op={OPR_EQ="OP_EQ",OPR_NE="OP_EQ",OPR_LT="OP_LT",OPR_LE="OP_LE",OPR_GT="OP_LT",OPR_GE="OP_LE"}z.comp_cond={OPR_EQ=1,OPR_NE=0,OPR_LT=1,OPR_LE=1,OPR_GT=0,OPR_GE=0}function z:posfix(a,b,c,d)local function e(a,b)a.k=b.k;a.info=b.info;a.aux=b.aux;a.nval=b.nval;a.t=b.t;a.f=b.f end;if b=="OPR_AND"then assert(c.t==self.NO_JUMP)self:dischargevars(a,d)d.f=self:concat(a,d.f,c.f)e(c,d)elseif b=="OPR_OR"then assert(c.f==self.NO_JUMP)self:dischargevars(a,d)d.t=self:concat(a,d.t,c.t)e(c,d)elseif b=="OPR_CONCAT"then self:exp2val(a,d)if d.k=="VRELOCABLE"and u:GET_OPCODE(self:getcode(a,d))=="OP_CONCAT"then assert(c.info==u:GETARG_B(self:getcode(a,d))-1)self:freeexp(a,c)u:SETARG_B(self:getcode(a,d),c.info)c.k="VRELOCABLE"c.info=d.info else self:exp2nextreg(a,d)self:codearith(a,"OP_CONCAT",c,d)end else local e=self.arith_op[b]if e then self:codearith(a,e,c,d)else local e=self.comp_op[b]if e then self:codecomp(a,e,self.comp_cond[b],c,d)else assert(0)end end end end;function z:fixline(a,b)a.f.lineinfo[a.pc-1]=b end;function z:code(a,b,c)local d=a.f;self:dischargejpc(a)y:growvector(a.L,d.code,a.pc,d.sizecode,nil,y.MAX_INT,"code size overflow")d.code[a.pc]=b;y:growvector(a.L,d.lineinfo,a.pc,d.sizelineinfo,nil,y.MAX_INT,"code size overflow")d.lineinfo[a.pc]=c;local b=a.pc;a.pc=a.pc+1;return b end;function z:codeABC(a,b,c,d,e)assert(u:getOpMode(b)==u.OpMode.iABC)assert(u:getBMode(b)~=u.OpArgMask.OpArgN or d==0)assert(u:getCMode(b)~=u.OpArgMask.OpArgN or e==0)return self:code(a,u:CREATE_ABC(b,c,d,e),a.ls.lastline)end;function z:codeABx(a,b,c,d)assert(u:getOpMode(b)==u.OpMode.iABx or u:getOpMode(b)==u.OpMode.iAsBx)assert(u:getCMode(b)==u.OpArgMask.OpArgN)return self:code(a,u:CREATE_ABx(b,c,d),a.ls.lastline)end;function z:setlist(a,b,c,d)local c=math.floor((c-1)/u.LFIELDS_PER_FLUSH)+1;local e=(d==y.LUA_MULTRET)and 0 or d;assert(d~=0)if c<=u.MAXARG_C then self:codeABC(a,"OP_SETLIST",b,e,c)else self:codeABC(a,"OP_SETLIST",b,e,0)self:code(a,u:CREATE_Inst(c),a.ls.lastline)end;a.freereg=b+1 end;y={}y.LUA_QS=x.LUA_QS or"'%s'"y.SHRT_MAX=32767;y.LUAI_MAXVARS=200;y.LUAI_MAXUPVALUES=60;y.MAX_INT=x.MAX_INT or 2147483645;y.LUAI_MAXCCALLS=200;y.VARARG_HASARG=1;y.HASARG_MASK=2;y.VARARG_ISVARARG=2;y.VARARG_NEEDSARG=4;y.LUA_MULTRET=-1;function y:LUA_QL(a)return"'"..a.."'"end;function y:growvector(a,a,a,b,b,b,c)if a>=b then error(c)end end;function y:newproto(a)local a={}a.k={}a.sizek=0;a.p={}a.sizep=0;a.code={}a.sizecode=0;a.sizelineinfo=0;a.sizeupvalues=0;a.nups=0;a.upvalues={}a.numparams=0;a.is_vararg=0;a.maxstacksize=0;a.lineinfo={}a.sizelocvars=0;a.locvars={}a.lineDefined=0;a.lastlinedefined=0;a.source=nil;return a end;function y:int2fb(a)local b=0;while a>=16 do a=math.floor((a+1)/2)b=b+1 end;if a<8 then return a else return((b+1)*8)+(a-8)end end;function y:hasmultret(a)return a=="VCALL"or a=="VVARARG"end;function y:getlocvar(a,b)return a.f.locvars[a.actvar[b]]end;function y:checklimit(a,b,c,d)if b>c then self:errorlimit(a,c,d)end end;function y:anchor_token(a)if a.t.token=="TK_NAME"or a.t.token=="TK_STRING"then end end;function y:error_expected(a,b)x:syntaxerror(a,string.format(self.LUA_QS.." expected",x:token2str(a,b)))end;function y:errorlimit(a,b,c)local b=(a.f.linedefined==0)and string.format("main function has more than %d %s",b,c)or string.format("function at line %d has more than %d %s",a.f.linedefined,b,c)x:lexerror(a.ls,b,0)end;function y:testnext(a,b)if a.t.token==b then x:next(a)return true else return false end end;function y:check(a,b)if a.t.token~=b then self:error_expected(a,b)end end;function y:checknext(a,b)self:check(a,b)x:next(a)end;function y:check_condition(a,b,c)if not b then x:syntaxerror(a,c)end end;function y:check_match(a,b,c,d)if not self:testnext(a,b)then if d==a.linenumber then self:error_expected(a,b)else x:syntaxerror(a,string.format(self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",x:token2str(a,b),x:token2str(a,c),d))end end end;function y:str_checkname(a)self:check(a,"TK_NAME")local b=a.t.seminfo;x:next(a)return b end;function y:init_exp(a,b,c)a.f,a.t=z.NO_JUMP,z.NO_JUMP;a.k=b;a.info=c end;function y:codestring(a,b,c)self:init_exp(b,"VK",z:stringK(a.fs,c))end;function y:checkname(a,b)self:codestring(a,b,self:str_checkname(a))end;function y:registerlocalvar(a,b)local c=a.fs;local d=c.f;self:growvector(a.L,d.locvars,c.nlocvars,d.sizelocvars,nil,self.SHRT_MAX,"too many local variables")d.locvars[c.nlocvars]={}d.locvars[c.nlocvars].varname=b;local a=c.nlocvars;c.nlocvars=c.nlocvars+1;return a end;function y:new_localvarliteral(a,b,c)self:new_localvar(a,b,c)end;function y:new_localvar(a,b,c)local d=a.fs;self:checklimit(d,d.nactvar+c+1,self.LUAI_MAXVARS,"local variables")d.actvar[d.nactvar+c]=self:registerlocalvar(a,b)end;function y:adjustlocalvars(a,b)local a=a.fs;a.nactvar=a.nactvar+b;for b=b,1,-1 do self:getlocvar(a,a.nactvar-b).startpc=a.pc end end;function y:removevars(a,b)local a=a.fs;while a.nactvar>b do a.nactvar=a.nactvar-1;self:getlocvar(a,a.nactvar).endpc=a.pc end end;function y:indexupvalue(a,b,c)local d=a.f;for e=0,d.nups-1 do if a.upvalues[e].k==c.k and a.upvalues[e].info==c.info then assert(d.upvalues[e]==b)return e end end;self:checklimit(a,d.nups+1,self.LUAI_MAXUPVALUES,"upvalues")self:growvector(a.L,d.upvalues,d.nups,d.sizeupvalues,nil,self.MAX_INT,"")d.upvalues[d.nups]=b;assert(c.k=="VLOCAL"or c.k=="VUPVAL")a.upvalues[d.nups]={k=c.k,info=c.info}local a=d.nups;d.nups=d.nups+1;return a end;function y:searchvar(a,b)for c=a.nactvar-1,0,-1 do if b==self:getlocvar(a,c).varname then return c end end;return-1 end;function y:markupval(a,b)local a=a.bl;while a and a.nactvar>b do a=a.previous end;if a then a.upval=true end end;function y:singlevaraux(a,b,c,d)if a==nil then self:init_exp(c,"VGLOBAL",u.NO_REG)return"VGLOBAL"else local e=self:searchvar(a,b)if e>=0 then self:init_exp(c,"VLOCAL",e)if d==0 then self:markupval(a,e)end;return"VLOCAL"else if self:singlevaraux(a.prev,b,c,0)=="VGLOBAL"then return"VGLOBAL"end;c.info=self:indexupvalue(a,b,c)c.k="VUPVAL"return"VUPVAL"end end end;function y:singlevar(a,b)local c=self:str_checkname(a)local a=a.fs;if self:singlevaraux(a,c,b,1)=="VGLOBAL"then b.info=z:stringK(a,c)end end;function y:adjust_assign(a,b,c,d)local a=a.fs;local b=b-c;if self:hasmultret(d.k)then b=b+1;if b<=0 then b=0 end;z:setreturns(a,d,b)if b>1 then z:reserveregs(a,b-1)end else if d.k~="VVOID"then z:exp2nextreg(a,d)end;if b>0 then local c=a.freereg;z:reserveregs(a,b)z:_nil(a,c,b)end end end;function y:enterlevel(a)a.L.nCcalls=a.L.nCcalls+1;if a.L.nCcalls>self.LUAI_MAXCCALLS then x:lexerror(a,"chunk has too many syntax levels",0)end end;function y:leavelevel(a)a.L.nCcalls=a.L.nCcalls-1 end;function y:enterblock(a,b,c)b.breaklist=z.NO_JUMP;b.isbreakable=c;b.nactvar=a.nactvar;b.upval=false;b.previous=a.bl;a.bl=b;assert(a.freereg==a.nactvar)end;function y:leaveblock(a)local b=a.bl;a.bl=b.previous;self:removevars(a.ls,b.nactvar)if b.upval then z:codeABC(a,"OP_CLOSE",b.nactvar,0,0)end;assert(not b.isbreakable or not b.upval)assert(b.nactvar==a.nactvar)a.freereg=a.nactvar;z:patchtohere(a,b.breaklist)end;function y:pushclosure(a,b,c)local d=a.fs;local e=d.f;self:growvector(a.L,e.p,d.np,e.sizep,nil,u.MAXARG_Bx,"constant table overflow")e.p[d.np]=b.f;d.np=d.np+1;self:init_exp(c,"VRELOCABLE",z:codeABx(d,"OP_CLOSURE",0,d.np-1))for a=0,b.f.nups-1 do local c=(b.upvalues[a].k=="VLOCAL")and"OP_MOVE"or"OP_GETUPVAL"z:codeABC(d,c,0,b.upvalues[a].info,0)end end;function y:open_func(a,b)local c=a.L;local d=self:newproto(a.L)b.f=d;b.prev=a.fs;b.ls=a;b.L=c;a.fs=b;b.pc=0;b.lasttarget=-1;b.jpc=z.NO_JUMP;b.freereg=0;b.nk=0;b.np=0;b.nlocvars=0;b.nactvar=0;b.bl=nil;d.source=a.source;d.maxstacksize=2;b.h={}end;function y:close_func(a)local b=a.L;local b=a.fs;local c=b.f;self:removevars(a,0)z:ret(b,0,0)c.sizecode=b.pc;c.sizelineinfo=b.pc;c.sizek=b.nk;c.sizep=b.np;c.sizelocvars=b.nlocvars;c.sizeupvalues=c.nups;assert(b.bl==nil)a.fs=b.prev;if b then self:anchor_token(a)end end;function y:parser(a,b,c,d)local e={}e.t={}e.lookahead={}local f={}f.upvalues={}f.actvar={}a.nCcalls=0;e.buff=c;x:setinput(a,e,b,d)self:open_func(e,f)f.f.is_vararg=self.VARARG_ISVARARG;x:next(e)self:chunk(e)self:check(e,"TK_EOS")self:close_func(e)assert(f.prev==nil)assert(f.f.nups==0)assert(e.fs==nil)return f.f end;function y:field(a,b)local c=a.fs;local d={}z:exp2anyreg(c,b)x:next(a)self:checkname(a,d)z:indexed(c,b,d)end;function y:yindex(a,b)x:next(a)self:expr(a,b)z:exp2val(a.fs,b)self:checknext(a,"]")end;function y:recfield(a,b)local c=a.fs;local d=a.fs.freereg;local e,f={},{}if a.t.token=="TK_NAME"then self:checklimit(c,b.nh,self.MAX_INT,"items in a constructor")self:checkname(a,e)else self:yindex(a,e)end;b.nh=b.nh+1;self:checknext(a,"=")local e=z:exp2RK(c,e)self:expr(a,f)z:codeABC(c,"OP_SETTABLE",b.t.info,e,z:exp2RK(c,f))c.freereg=d end;function y:closelistfield(a,b)if b.v.k=="VVOID"then return end;z:exp2nextreg(a,b.v)b.v.k="VVOID"if b.tostore==u.LFIELDS_PER_FLUSH then z:setlist(a,b.t.info,b.na,b.tostore)b.tostore=0 end end;function y:lastlistfield(a,b)if b.tostore==0 then return end;if self:hasmultret(b.v.k)then z:setmultret(a,b.v)z:setlist(a,b.t.info,b.na,self.LUA_MULTRET)b.na=b.na-1 else if b.v.k~="VVOID"then z:exp2nextreg(a,b.v)end;z:setlist(a,b.t.info,b.na,b.tostore)end end;function y:listfield(a,b)self:expr(a,b.v)self:checklimit(a.fs,b.na,self.MAX_INT,"items in a constructor")b.na=b.na+1;b.tostore=b.tostore+1 end;function y:constructor(a,b)local c=a.fs;local d=a.linenumber;local e=z:codeABC(c,"OP_NEWTABLE",0,0,0)local f={}f.v={}f.na,f.nh,f.tostore=0,0,0;f.t=b;self:init_exp(b,"VRELOCABLE",e)self:init_exp(f.v,"VVOID",0)z:exp2nextreg(a.fs,b)self:checknext(a,"{")repeat assert(f.v.k=="VVOID"or f.tostore>0)if a.t.token=="}"then break end;self:closelistfield(c,f)local b=a.t.token;if b=="TK_NAME"then x:lookahead(a)if a.lookahead.token~="="then self:listfield(a,f)else self:recfield(a,f)end elseif b=="["then self:recfield(a,f)else self:listfield(a,f)end until not self:testnext(a,",")and not self:testnext(a,";")self:check_match(a,"}","{",d)self:lastlistfield(c,f)u:SETARG_B(c.f.code[e],self:int2fb(f.na))u:SETARG_C(c.f.code[e],self:int2fb(f.nh))end;function y:parlist(a)local b=a.fs;local c=b.f;local d=0;c.is_vararg=0;if a.t.token~=")"then repeat local b=a.t.token;if b=="TK_NAME"then self:new_localvar(a,self:str_checkname(a),d)d=d+1 elseif b=="TK_DOTS"then x:next(a)self:new_localvarliteral(a,"arg",d)d=d+1;c.is_vararg=self.VARARG_HASARG+self.VARARG_NEEDSARG;c.is_vararg=c.is_vararg+self.VARARG_ISVARARG else x:syntaxerror(a,"<name> or "..self:LUA_QL("...").." expected")end until c.is_vararg~=0 or not self:testnext(a,",")end;self:adjustlocalvars(a,d)c.numparams=b.nactvar-(c.is_vararg%self.HASARG_MASK)z:reserveregs(b,b.nactvar)end;function y:body(a,b,c,d)local e={}e.upvalues={}e.actvar={}self:open_func(a,e)e.f.lineDefined=d;self:checknext(a,"(")if c then self:new_localvarliteral(a,"self",0)self:adjustlocalvars(a,1)end;self:parlist(a)self:checknext(a,")")self:chunk(a)e.f.lastlinedefined=a.linenumber;self:check_match(a,"TK_END","TK_FUNCTION",d)self:close_func(a)self:pushclosure(a,e,b)end;function y:explist1(a,b)local c=1;self:expr(a,b)while self:testnext(a,",")do z:exp2nextreg(a.fs,b)self:expr(a,b)c=c+1 end;return c end;function y:funcargs(a,b)local c=a.fs;local d={}local e;local f=a.linenumber;local g=a.t.token;if g=="("then if f~=a.lastline then x:syntaxerror(a,"ambiguous syntax (function call x new statement)")end;x:next(a)if a.t.token==")"then d.k="VVOID"else self:explist1(a,d)z:setmultret(c,d)end;self:check_match(a,")","(",f)elseif g=="{"then self:constructor(a,d)elseif g=="TK_STRING"then self:codestring(a,d,a.t.seminfo)x:next(a)else x:syntaxerror(a,"function arguments expected")return end;assert(b.k=="VNONRELOC")local a=b.info;if self:hasmultret(d.k)then e=self.LUA_MULTRET else if d.k~="VVOID"then z:exp2nextreg(c,d)end;e=c.freereg-(a+1)end;self:init_exp(b,"VCALL",z:codeABC(c,"OP_CALL",a,e+1,2))z:fixline(c,f)c.freereg=a+1 end;function y:prefixexp(a,b)local c=a.t.token;if c=="("then local c=a.linenumber;x:next(a)self:expr(a,b)self:check_match(a,")","(",c)z:dischargevars(a.fs,b)elseif c=="TK_NAME"then self:singlevar(a,b)else x:syntaxerror(a,"unexpected symbol")end;return end;function y:primaryexp(a,b)local c=a.fs;self:prefixexp(a,b)while true do local d=a.t.token;if d=="."then self:field(a,b)elseif d=="["then local d={}z:exp2anyreg(c,b)self:yindex(a,d)z:indexed(c,b,d)elseif d==":"then local d={}x:next(a)self:checkname(a,d)z:_self(c,b,d)self:funcargs(a,b)elseif d=="("or d=="TK_STRING"or d=="{"then z:exp2nextreg(c,b)self:funcargs(a,b)else return end end end;function y:simpleexp(a,b)local c=a.t.token;if c=="TK_NUMBER"then self:init_exp(b,"VKNUM",0)b.nval=a.t.seminfo elseif c=="TK_STRING"then self:codestring(a,b,a.t.seminfo)elseif c=="TK_NIL"then self:init_exp(b,"VNIL",0)elseif c=="TK_TRUE"then self:init_exp(b,"VTRUE",0)elseif c=="TK_FALSE"then self:init_exp(b,"VFALSE",0)elseif c=="TK_DOTS"then local c=a.fs;self:check_condition(a,c.f.is_vararg~=0,"cannot use "..self:LUA_QL("...").." outside a vararg function")local a=c.f.is_vararg;if a>=self.VARARG_NEEDSARG then c.f.is_vararg=a-self.VARARG_NEEDSARG end;self:init_exp(b,"VVARARG",z:codeABC(c,"OP_VARARG",0,1,0))elseif c=="{"then self:constructor(a,b)return elseif c=="TK_FUNCTION"then x:next(a)self:body(a,b,false,a.linenumber)return else self:primaryexp(a,b)return end;x:next(a)end;function y:getunopr(a)if a=="TK_NOT"then return"OPR_NOT"elseif a=="-"then return"OPR_MINUS"elseif a=="#"then return"OPR_LEN"else return"OPR_NOUNOPR"end end;y.getbinopr_table={["+"]="OPR_ADD",["-"]="OPR_SUB",["*"]="OPR_MUL",["/"]="OPR_DIV",["%"]="OPR_MOD",["^"]="OPR_POW",["TK_CONCAT"]="OPR_CONCAT",["TK_NE"]="OPR_NE",["TK_EQ"]="OPR_EQ",["<"]="OPR_LT",["TK_LE"]="OPR_LE",[">"]="OPR_GT",["TK_GE"]="OPR_GE",["TK_AND"]="OPR_AND",["TK_OR"]="OPR_OR"}function y:getbinopr(a)local a=self.getbinopr_table[a]if a then return a else return"OPR_NOBINOPR"end end;y.COMPOUND_OP_TRANSLATE={TK_ASSIGN_ADD="OP_ADD",TK_ASSIGN_SUB="OP_SUB",TK_ASSIGN_MUL="OP_MUL",TK_ASSIGN_DIV="OP_DIV",TK_ASSIGN_MOD="OP_MOD",TK_ASSIGN_POW="OP_POW"}function y:getcompopr(a)local a=self.COMPOUND_OP_TRANSLATE[a]if a then return a else return"OP_NOCOMOPR"end end;y.priority={{6,6},{6,6},{7,7},{7,7},{7,7},{10,9},{5,4},{3,3},{3,3},{3,3},{3,3},{3,3},{3,3},{2,2},{1,1}}y.UNARY_PRIORITY=8;function y:subexpr(a,b,c)self:enterlevel(a)local d=self:getunopr(a.t.token)if d~="OPR_NOUNOPR"then x:next(a)self:subexpr(a,b,self.UNARY_PRIORITY)z:prefix(a.fs,d,b)else self:simpleexp(a,b)end;local d=self:getbinopr(a.t.token)while d~="OPR_NOBINOPR"and self.priority[z.BinOpr[d]+1][1]>c do local c={}x:next(a)z:infix(a.fs,d,b)local e=self:subexpr(a,c,self.priority[z.BinOpr[d]+1][2])z:posfix(a.fs,d,b,c)d=e end;self:leavelevel(a)return d end;function y:expr(a,b)self:subexpr(a,b,0)end;function y:block_follow(a)if a=="TK_ELSE"or a=="TK_ELSEIF"or a=="TK_END"or a=="TK_UNTIL"or a=="TK_EOS"then return true else return false end end;function y:block(a)local b=a.fs;local c={}self:enterblock(b,c,false)self:chunk(a)assert(c.breaklist==z.NO_JUMP)self:leaveblock(b)end;function y:check_conflict(a,b,c)local a=a.fs;local d=a.freereg;local e=false;while b do if b.v.k=="VINDEXED"then if b.v.info==c.info then e=true;b.v.info=d end;if b.v.aux==c.info then e=true;b.v.aux=d end end;b=b.prev end;if e then z:codeABC(a,"OP_MOVE",a.freereg,c.info,0)z:reserveregs(a,1)end end;function y:assignment(a,b,c)local d={}local e=b.v.k;self:check_condition(a,e=="VLOCAL"or e=="VUPVAL"or e=="VGLOBAL"or e=="VINDEXED","syntax error")if self:testnext(a,",")then local d={}d.v={}d.prev=b;self:primaryexp(a,d.v)if d.v.k=="VLOCAL"then self:check_conflict(a,b,d.v)end;self:checklimit(a.fs,c,self.LUAI_MAXCCALLS-a.L.nCcalls,"variables in assignment")self:assignment(a,d,c+1)else local e=self:getcompopr(a.t.token)if e~="OP_NOCOMOPR"then x:next(a)else self:checknext(a,"=")end;local f=self:explist1(a,d)if f~=c then self:adjust_assign(a,c,f,d)if f>c then a.fs.freereg=a.fs.freereg-(f-c)end else z:setoneret(a.fs,d)if e~="OP_NOCOMOPR"then z:exp2val(a.fs,b.v)z:exp2val(a.fs,d)z:codearith(a.fs,e,b.v,d)end;z:storevar(a.fs,b.v,d)return end end;self:init_exp(d,"VNONRELOC",a.fs.freereg-1)z:storevar(a.fs,b.v,d)end;function y:cond(a)local b={}self:expr(a,b)if b.k=="VNIL"then b.k="VFALSE"end;z:goiftrue(a.fs,b)return b.f end;function y:breakstat(a)local b=a.fs;local c=b.bl;local d=false;while c and not c.isbreakable do if c.upval then d=true end;c=c.previous end;if not c then x:syntaxerror(a,"no loop to break")end;if d then z:codeABC(b,"OP_CLOSE",c.nactvar,0,0)end;c.breaklist=z:concat(b,c.breaklist,z:jump(b))end;function y:continuestat(a)local b=a.fs;local c=b.bl;local d=false;while c and not c.isbreakable do if c.upval then d=true end;c=c.previous end;if not c then x:syntaxerror(a,"no loop to continue")end;if d then z:codeABC(b,"OP_CLOSE",c.nactvar,0,0)end;z:codeAsBx(b,"OP_JMP",0,c.breaklist.previous)end;function y:whilestat(a,b)local c=a.fs;local d={}x:next(a)local e=z:getlabel(c)local f=self:cond(a)self:enterblock(c,d,true)self:checknext(a,"TK_DO")self:block(a)z:patchlist(c,z:jump(c),e)self:check_match(a,"TK_END","TK_WHILE",b)self:leaveblock(c)z:patchtohere(c,f)end;function y:repeatstat(a,b)local c=a.fs;local d=z:getlabel(c)local e,f={},{}self:enterblock(c,e,true)self:enterblock(c,f,false)x:next(a)self:chunk(a)self:check_match(a,"TK_UNTIL","TK_REPEAT",b)local b=self:cond(a)if not f.upval then self:leaveblock(c)z:patchlist(a.fs,b,d)else self:breakstat(a)z:patchtohere(a.fs,b)self:leaveblock(c)z:patchlist(a.fs,z:jump(c),d)end;self:leaveblock(c)end;function y:exp1(a)local b={}self:expr(a,b)local c=b.k;z:exp2nextreg(a.fs,b)return c end;function y:forbody(a,b,c,d,e)local f={}local g=a.fs;self:adjustlocalvars(a,3)self:checknext(a,"TK_DO")local h=e and z:codeAsBx(g,"OP_FORPREP",b,z.NO_JUMP)or z:jump(g)self:enterblock(g,f,false)self:adjustlocalvars(a,d)z:reserveregs(g,d)self:block(a)self:leaveblock(g)z:patchtohere(g,h)local a=e and z:codeAsBx(g,"OP_FORLOOP",b,z.NO_JUMP)or z:codeABC(g,"OP_TFORLOOP",b,0,d)z:fixline(g,c)z:patchlist(g,e and a or z:jump(g),h+1)end;function y:fornum(a,b,c)local d=a.fs;local e=d.freereg;self:new_localvarliteral(a,"(for index)",0)self:new_localvarliteral(a,"(for limit)",1)self:new_localvarliteral(a,"(for step)",2)self:new_localvar(a,b,3)self:checknext(a,'=')self:exp1(a)self:checknext(a,",")self:exp1(a)if self:testnext(a,",")then self:exp1(a)else z:codeABx(d,"OP_LOADK",d.freereg,z:numberK(d,1))z:reserveregs(d,1)end;self:forbody(a,e,c,1,true)end;function y:forlist(a,b)local c=a.fs;local d={}local e=0;local f=c.freereg;self:new_localvarliteral(a,"(for generator)",e)e=e+1;self:new_localvarliteral(a,"(for state)",e)e=e+1;self:new_localvarliteral(a,"(for control)",e)e=e+1;self:new_localvar(a,b,e)e=e+1;while self:testnext(a,",")do self:new_localvar(a,self:str_checkname(a),e)e=e+1 end;self:checknext(a,"TK_IN")local b=a.linenumber;self:adjust_assign(a,3,self:explist1(a,d),d)z:checkstack(c,3)self:forbody(a,f,b,e-3,false)end;function y:forstat(a,b)local c=a.fs;local d={}self:enterblock(c,d,true)x:next(a)local d=self:str_checkname(a)local e=a.t.token;if e=="="then self:fornum(a,d,b)elseif e==","or e=="TK_IN"then self:forlist(a,d)else x:syntaxerror(a,self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")end;self:check_match(a,"TK_END","TK_FOR",b)self:leaveblock(c)end;function y:test_then_block(a)x:next(a)local b=self:cond(a)self:checknext(a,"TK_THEN")self:block(a)return b end;function y:ifstat(a,b)local c=a.fs;local d=z.NO_JUMP;local e=self:test_then_block(a)while a.t.token=="TK_ELSEIF"do d=z:concat(c,d,z:jump(c))z:patchtohere(c,e)e=self:test_then_block(a)end;if a.t.token=="TK_ELSE"then d=z:concat(c,d,z:jump(c))z:patchtohere(c,e)x:next(a)self:block(a)else d=z:concat(c,d,e)end;z:patchtohere(c,d)self:check_match(a,"TK_END","TK_IF",b)end;function y:localfunc(a)local b,c={},{}local d=a.fs;self:new_localvar(a,self:str_checkname(a),0)self:init_exp(b,"VLOCAL",d.freereg)z:reserveregs(d,1)self:adjustlocalvars(a,1)self:body(a,c,false,a.linenumber)z:storevar(d,b,c)self:getlocvar(d,d.nactvar-1).startpc=d.pc end;function y:localstat(a)local b=0;local c;local d={}repeat self:new_localvar(a,self:str_checkname(a),b)b=b+1 until not self:testnext(a,",")if self:testnext(a,"=")then c=self:explist1(a,d)else d.k="VVOID"c=0 end;self:adjust_assign(a,b,c,d)self:adjustlocalvars(a,b)end;function y:funcname(a,b)local c=false;self:singlevar(a,b)while a.t.token=="."do self:field(a,b)end;if a.t.token==":"then c=true;self:field(a,b)end;return c end;function y:funcstat(a,b)local c,d={},{}x:next(a)local e=self:funcname(a,c)self:body(a,d,e,b)z:storevar(a.fs,c,d)z:fixline(a.fs,b)end;function y:exprstat(a)local b=a.fs;local c={}c.v={}self:primaryexp(a,c.v)if c.v.k=="VCALL"then u:SETARG_C(z:getcode(b,c.v),1)else c.prev=nil;self:assignment(a,c,1)end end;function y:retstat(a)local b=a.fs;local c={}local d,e;x:next(a)if self:block_follow(a.t.token)or a.t.token==";"then d,e=0,0 else e=self:explist1(a,c)if self:hasmultret(c.k)then z:setmultret(b,c)if c.k=="VCALL"and e==1 then u:SET_OPCODE(z:getcode(b,c),"OP_TAILCALL")assert(u:GETARG_A(z:getcode(b,c))==b.nactvar)end;d=b.nactvar;e=self.LUA_MULTRET else if e==1 then d=z:exp2anyreg(b,c)else z:exp2nextreg(b,c)d=b.nactvar;assert(e==b.freereg-d)end end end;z:ret(b,d,e)end;function y:statement(a)local b=a.linenumber;local c=a.t.token;if c=="TK_IF"then self:ifstat(a,b)return false elseif c=="TK_WHILE"then self:whilestat(a,b)return false elseif c=="TK_DO"then x:next(a)self:block(a)self:check_match(a,"TK_END","TK_DO",b)return false elseif c=="TK_FOR"then self:forstat(a,b)return false elseif c=="TK_REPEAT"then self:repeatstat(a,b)return false elseif c=="TK_FUNCTION"then self:funcstat(a,b)return false elseif c=="TK_LOCAL"then x:next(a)if self:testnext(a,"TK_FUNCTION")then self:localfunc(a)else self:localstat(a)end;return false elseif c=="TK_RETURN"then self:retstat(a)return true elseif c=="TK_BREAK"then x:next(a)self:breakstat(a)return true elseif c=="TK_CONTINUE"then x:next(a)self:continuestat(a)return true else self:exprstat(a)return false end end;function y:chunk(a)local b=false;self:enterlevel(a)while not b and not self:block_follow(a.t.token)do b=self:statement(a)self:testnext(a,";")assert(a.fs.f.maxstacksize>=a.fs.freereg and a.fs.freereg>=a.fs.nactvar)a.fs.freereg=a.fs.nactvar end;self:leavelevel(a)end;local u=bit32;local z=table.unpack or unpack;local A;local B;local C;local D=50;local E={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local F={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local G={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function H(a,b,c,d)local e=0;for c=b,c,d do e=e+string.byte(a,c,c)*256^(c-b)end;return e end;local function I(a,b,c,d)local e=(-1)^u.rshift(d,7)local d=u.rshift(c,7)+u.lshift(u.band(d,127),1)local a=a+u.lshift(b,8)+u.lshift(u.band(c,127),16)local b=1;if d==0 then if a==0 then return e*0 else b=0;d=1 end elseif d==127 then if a==0 then return e*(1/0)else return e*(0/0)end end;return e*2^(d-127)*(1+b/2^23)end;local function J(a,b,c,d,e,f,g,h)local i=(-1)^u.rshift(h,7)local h=u.lshift(u.band(h,127),4)+u.rshift(g,4)local g=u.band(g,15)*2^48;local j=1;g=g+(f*2^40)+(e*2^32)+(d*2^24)+(c*2^16)+(b*2^8)+a;if h==0 then if g==0 then return i*0 else j=0;h=1 end elseif h==2047 then if g==0 then return i*(1/0)else return i*(0/0)end end;return i*2^(h-1023)*(j+g/2^52)end;local function K(a,b,c)return H(a,b,c-1,1)end;local function L(a,b,c)return H(a,c-1,b,-1)end;local function H(a,b)return I(string.byte(a,b,b+3))end;local function M(a,b)local a,b,c,d=string.byte(a,b,b+3)return I(d,c,b,a)end;local function I(a,b)return J(string.byte(a,b,b+7))end;local function N(a,b)local a,b,c,d,e,f,g,h=string.byte(a,b,b+7)return J(h,g,f,e,d,c,b,a)end;local H={[4]={little=H,big=M},[8]={little=I,big=N}}local function I(a)local b=a.index;local c=string.byte(a.source,b,b)a.index=b+1;return c end;local function J(a,b)local b=a.index+b;local c=string.sub(a.source,a.index,b-1)a.index=b;return c end;local function M(a)local b=a:s_szt()local c;if b~=0 then c=string.sub(J(a,b),1,-2)end;return c end;local function N(a,b)return function(c)local a=c.index+a;local b=b(c.source,c.index,a)c.index=a;return b end end;local function O(a,b)return function(c)local b=b(c.source,c.index)c.index=c.index+a;return b end end;local function P(a)local b=a:s_int()local c={}for b=1,b do local a=a:s_ins()local d=u.band(a,63)local e=F[d]local f=G[d]local d={value=a,op=E[d],A=u.band(u.rshift(a,6),255)}if e=='ABC'then d.B=u.band(u.rshift(a,23),511)d.C=u.band(u.rshift(a,14),511)d.is_KB=f.b=='OpArgK'and d.B>255;d.is_KC=f.c=='OpArgK'and d.C>255 elseif e=='ABx'then d.Bx=u.band(u.rshift(a,14),262143)d.is_K=f.b=='OpArgK'elseif e=='AsBx'then d.sBx=u.band(u.rshift(a,14),262143)-131071 end;c[b]=d end;return c end;local function u(a)local b=a:s_int()local c={}for b=1,b do local d=I(a)local e;if d==1 then e=I(a)~=0 elseif d==3 then e=a:s_num()elseif d==4 then e=M(a)end;c[b]=e end;return c end;local function F(a,b)local c=a:s_int()local d={}for c=1,c do d[c]=C(a,b)end;return d end;local function G(a)local b=a:s_int()local c={}for b=1,b do c[b]=a:s_int()end;return c end;local function Q(a)local b=a:s_int()local c={}for b=1,b do c[b]={varname=M(a),startpc=a:s_int(),endpc=a:s_int()}end;return c end;local function R(a)local b=a:s_int()local c={}for b=1,b do c[b]=M(a)end;return c end;function C(a,b)local c={}local b=M(a)or b;c.source=b;a:s_int()a:s_int()c.numupvals=I(a)c.numparams=I(a)I(a)I(a)c.code=P(a)c.const=u(a)c.subs=F(a,b)c.lines=G(a)Q(a)R(a)for a,a in ipairs(c.code)do if a.is_K then a.const=c.const[a.Bx+1]else if a.is_KB then a.const_B=c.const[a.B-255]end;if a.is_KC then a.const_C=c.const[a.C-255]end end end;return c end;function A(a)local b;local c;local d;local e;local f;local g;local h;local a={index=1,source=a}assert(J(a,4)=='\27Lua','invalid Lua signature')assert(I(a)==81,'invalid Lua version')assert(I(a)==0,'invalid Lua format')c=I(a)~=0;d=I(a)e=I(a)f=I(a)g=I(a)h=I(a)~=0;b=c and K or L;a.s_int=N(d,b)a.s_szt=N(e,b)a.s_ins=N(f,b)if h then a.s_num=N(g,b)elseif H[g]then a.s_num=O(g,H[g][c and'little'or'big'])else error('unsupported float size')end;return C(a,'@virtual')end;local function u(a,b)for c,d in pairs(a)do if d.index>=b then d.value=d.store[d.index]d.store=d;d.index='value'a[c]=nil end end end;local function C(a,b,c)local d=a[b]if not d then d={index=b,store=c}a[b]=d end;return d end;local function F(...)return select('#',...),{...}end;local function G(a,b)local c=a.source;local a=a.lines[a.pc-1]local d,e,f=string.match(b or'','^(.-):(%d+):%s+(.+)')local g='%s:%i: [%s:%i] %s'a=a or'0'd=d or'?'e=e or'0'f=f or b or''error(string.format(g,c,a,d,e,f),0)end;local function H(a)local b=a.code;local c=a.subs;local d=a.env;local e=a.upvals;local f=a.varargs;local g=-1;local h={}local i=a.stack;local j=a.pc;while true do local k=b[j]local l=k.op;j=j+1;if l<18 then if l<8 then if l<3 then if l<1 then for a=k.A,k.B do i[a]=nil end elseif l>1 then local a=e[k.B]i[k.A]=a.store[a.index]else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a+b end elseif l>3 then if l<6 then if l>4 then local a=k.A;local b=k.B;local c;if k.is_KC then c=k.const_C else c=i[k.C]end;i[a+1]=i[b]i[a]=i[b][c]else i[k.A]=d[k.const]end elseif l>6 then local a;if k.is_KC then a=k.const_C else a=i[k.C]end;i[k.A]=i[k.B][a]else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a-b end else i[k.A]=i[k.B]end elseif l>8 then if l<13 then if l<10 then d[k.const]=i[k.A]elseif l>10 then if l<12 then local a=k.A;local b=k.B;local c=k.C;local d;local e,f;if b==0 then d=g-a else d=b-1 end;e,f=F(i[a](z(i,a+1,a+d)))if c==0 then g=a+e-1 else e=c-1 end;for b=1,e do i[a+b-1]=f[b]end else local a=e[k.B]a.store[a.index]=i[k.A]end else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a*b end elseif l>13 then if l<16 then if l>14 then local a=k.A;local b=k.B;local c;if b==0 then c=g-a else c=b-1 end;u(h,0)return F(i[a](z(i,a+1,a+c)))else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A][a]=b end elseif l>16 then i[k.A]={}else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a/b end else i[k.A]=k.const end else local a=k.A;local b=i[a+2]local c=i[a]+b;local a=i[a+1]local d;if b==math.abs(b)then d=c<=a else d=c>=a end;if d then i[k.A]=c;i[k.A+3]=c;j=j+k.sBx end end elseif l>18 then if l<28 then if l<23 then if l<20 then i[k.A]=#i[k.B]elseif l>20 then if l<22 then local a=k.A;local b=k.B;local c={}local d;if b==0 then d=g-a+1 else d=b-1 end;for b=1,d do c[b]=i[a+b-1]end;u(h,0)return d,c else local a=i[k.B]for b=k.B+1,k.C do a=a..i[b]end;i[k.A]=a end else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a%b end elseif l>23 then if l<26 then if l>24 then u(h,k.A)else local a,c;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then c=k.const_C else c=i[k.C]end;if(a==c)==(k.A~=0)then j=j+b[j].sBx end;j=j+1 end elseif l>26 then local a,c;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then c=k.const_C else c=i[k.C]end;if(a<c)==(k.A~=0)then j=j+b[j].sBx end;j=j+1 else local a,b;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then b=k.const_C else b=i[k.C]end;i[k.A]=a^b end else i[k.A]=k.B~=0;if k.C~=0 then j=j+1 end end elseif l>28 then if l<33 then if l<30 then local a,c;if k.is_KB then a=k.const_B else a=i[k.B]end;if k.is_KC then c=k.const_C else c=i[k.C]end;if(a<=c)==(k.A~=0)then j=j+b[j].sBx end;j=j+1 elseif l>30 then if l<32 then local a=c[k.Bx+1]local c=a.numupvals;local f;if c~=0 then f={}for a=1,c do local b=b[j+a-1]if b.op==E[0]then f[a-1]=C(h,b.B,i)elseif b.op==E[4]then f[a-1]=e[b.B]end end;j=j+c end;i[k.A]=B(a,d,f)else local a=k.A;local b=k.B;if(not i[b])==(k.C~=0)then j=j+1 else i[a]=i[b]end end else i[k.A]=-i[k.B]end elseif l>33 then if l<36 then if l>34 then local a=k.A;local b=k.B;if b==0 then b=f.size;g=a+b-1 end;for b=1,b do i[a+b-1]=f.list[b]end else local a=k.A;local b,c,d;b=assert(tonumber(i[a]),'`for` initial value must be a number')c=assert(tonumber(i[a+1]),'`for` limit must be a number')d=assert(tonumber(i[a+2]),'`for` step must be a number')i[a]=b-d;i[a+1]=c;i[a+2]=d;j=j+k.sBx end elseif l>36 then local a=k.A;local b=k.C;local c=k.B;local d=i[a]local e;if c==0 then c=g-a end;if b==0 then b=k[j].value;j=j+1 end;e=(b-1)*D;for b=1,c do d[b+e]=i[a+b]end else i[k.A]=not i[k.B]end else if(not i[k.A])==(k.C~=0)then j=j+1 end end else local a=k.A;local b=i[a]local c=i[a+1]local d=i[a+2]local e=a+3;local f;if not d and not c and type(b)=="table"then local e=pcall(getmetatable,b)local f=e and not pcall(setmetatable,b,getmetatable(b))or not e;local e=e and getmetatable(b)if not(table.isfrozen and table.isfrozen(b))and f and not e then warn("The table has a metatable buts it's hidden, __iter and __call won't work in forloop.")end;if not(type(e)=="table"and rawget(e,"__call"))then b,c,d=(type(e)=="table"and rawget(e,"__iter")or next),b,nil;i[a],i[a+1],i[a+2]=b,c,d end end;i[e+2]=d;i[e+1]=c;i[e]=b;f={b(c,d)}for a=1,k.C do i[e+a-1]=f[a]end;if i[e]~=nil then i[a+2]=i[e]else j=j+1 end end else j=j+k.sBx end;a.pc=j end end;function B(a,b,c)local d=a.code;local e=a.subs;local f=a.lines;local g=a.source;local a=a.numparams;local function h(...)local h={}local i={}local j=0;local k,l=F(...)local m;local n,o,p;for a=1,a do h[a-1]=l[a]end;if a<k then j=k-a;for b=1,j do i[b]=l[a+b]end end;m={varargs={list=i,size=j},code=d,subs=e,lines=f,source=g,env=b,upvals=c,stack=h,pc=1}n,o,p=pcall(H,m,...)if n then return z(p,1,o)else G(m,o)end;return end;return h end;local function u(a,b)return B(A(a),b or{})end;x:init()local x={}local z=script;if z then z.Parent=nil;z=nil end;getfenv().script=nil;for a=0,1 do getfenv(a).script=nil end;local function z(a,b)local c,d,e;b=b or getfenv(2)local a,b=xpcall(function()local a=v:init(v:make_getS(a),nil)if not a then return end;local a=y:parser(x,a,nil,"NanocoreVM")d,e=w:make_setS()w:dump(x,a,d,e)c=u(e.data,b)end,function(a)return`{err}\n\n--- Loadstring Stacktrace Begin --- \n{debug.traceback("",2)}\n--- Loadstring Stacktrace End --- \n`end)if a then return c,e.data else return nil,b end end;task.spawn(s,a)local u=pcall(function()a.Parent=game:GetService("CoreGui"):WaitForChild("RobloxGui",math.huge)end)if not u then local b=Instance.new("ScreenGui")task.spawn(s,b)b.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;b.DisplayOrder=9e8;b.IgnoreGuiInset=true;b.Parent=game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui",math.huge)a.Parent=b end;a.AnchorPoint=Vector2.new(0.5,0.5)a.BackgroundColor3=Color3.fromRGB(60,60,60)a.BorderSizePixel=0;a.Position=UDim2.new(0.5,0,0.5,0)a.Size=UDim2.new(0,500,0,300)task.spawn(s,b)b.CornerRadius=UDim.new(0,4)b.Parent=a;task.spawn(s,c)c.BackgroundColor3=Color3.fromRGB(50,50,50)c.BorderSizePixel=0;c.Size=UDim2.new(1,0,0,30)c.ZIndex=2;c.Font=Enum.Font.Gotham;c.Text="Nanocore"c.TextColor3=Color3.fromRGB(255,255,255)c.TextSize=14;c.Parent=a;task.spawn(s,d)d.CornerRadius=UDim.new(0,4)d.Parent=c;task.spawn(s,e)e.BackgroundColor3=Color3.fromRGB(50,50,50)e.BorderSizePixel=0;e.ClipsDescendants=true;e.Position=UDim2.new(0,10,0,40)e.Size=UDim2.new(1,-20,1,-90)e.Parent=a;task.spawn(s,f)f.Active=true;f.BackgroundColor3=Color3.fromRGB(255,255,255)f.BackgroundTransparency=1;f.BorderSizePixel=0;f.Size=UDim2.new(1.04583335,-22,1,0)f.AutomaticCanvasSize=Enum.AutomaticSize.XY;f.CanvasSize=UDim2.new(0,0,0,0)f.ScrollBarThickness=6;f.Parent=e;task.spawn(s,g)g.AutomaticSize=Enum.AutomaticSize.XY;g.BackgroundColor3=Color3.fromRGB(255,255,255)g.BackgroundTransparency=1;g.BorderSizePixel=0;g.Size=UDim2.new(1,0,1,0)g.ClearTextOnFocus=false;g.Font=Enum.Font.Code;g.MultiLine=true;g.Text="print(\"Hello world!\")"g.TextColor3=Color3.fromRGB(255,255,255)g.TextSize=14;g.TextXAlignment=Enum.TextXAlignment.Left;g.TextYAlignment=Enum.TextYAlignment.Top;g.Parent=f;task.spawn(s,h)h.PaddingLeft=UDim.new(0,8)h.PaddingTop=UDim.new(0,5)h.Parent=g;task.spawn(s,i)i.AnchorPoint=Vector2.new(0,1)i.BackgroundColor3=Color3.fromRGB(255,255,255)i.BackgroundTransparency=1;i.BorderSizePixel=0;i.Position=UDim2.new(0,10,1,-10)i.Size=UDim2.new(1,-20,0,30)i.Parent=a;task.spawn(s,j)j.FillDirection=Enum.FillDirection.Horizontal;j.SortOrder=Enum.SortOrder.LayoutOrder;j.Padding=UDim.new(0,10)j.Parent=i;task.spawn(s,k)k.BackgroundColor3=Color3.fromRGB(50,50,50)k.BorderSizePixel=0;k.LayoutOrder=1;k.Size=UDim2.new(0,80,1,0)k.AutoButtonColor=false;k.Font=Enum.Font.Gotham;k.Text="Execute"k.TextColor3=Color3.fromRGB(255,255,255)k.TextSize=14;k.Parent=i;task.spawn(s,l)l.ApplyStrokeMode=Enum.ApplyStrokeMode.Border;l.Color=Color3.fromRGB(150,150,150)l.Transparency=1;l.Parent=k;task.spawn(s,m)m.CornerRadius=UDim.new(0,4)m.Parent=k;task.spawn(s,n)n.BackgroundColor3=Color3.fromRGB(50,50,50)n.BorderSizePixel=0;n.LayoutOrder=2;n.Size=UDim2.new(0,80,1,0)n.AutoButtonColor=false;n.Font=Enum.Font.Gotham;n.Text="Clear"n.TextColor3=Color3.fromRGB(255,255,255)n.TextSize=14;n.Parent=i;task.spawn(s,o)o.ApplyStrokeMode=Enum.ApplyStrokeMode.Border;o.Color=Color3.fromRGB(150,150,150)o.Transparency=1;o.Parent=n;task.spawn(s,p)p.CornerRadius=UDim.new(0,4)p.Parent=n;task.spawn(s,q)q.Color=Color3.fromRGB(120,120,120)q.Parent=a;task.spawn(t,a)local a=string.reverse(game:GetService("HttpService"):GenerateGUID(false))local b=false;pcall(function()getfenv().loadstring(string.format("getfenv()[\"%s\"] = 0",a))()if getfenv()[a]==0 then b=true;getfenv()[a]=nil end end)if not b then getfenv().loadstring=z end;a=nil;b=false;task.spawn(function()local a=Color3.fromRGB(120,120,120)local b=Color3.fromRGB(170,170,170)local c=TweenInfo.new(0.1,Enum.EasingStyle.Sine,Enum.EasingDirection.Out)local function d(a,b)r:Create(a,c,b):Play()end;local c={Execute=function()xpcall(function()getfenv().loadstring(g.Text)()end,function(a)warn(a)end)end,Clear=function()g.Text=""end}for e,e in next,i:GetChildren()do if e:IsA("TextButton")then e.AutoButtonColor=false;local f=e:FindFirstChildWhichIsA("UIStroke")e.MouseEnter:Connect(function()f.Transparency=1;f.Color=a;d(f,{Transparency=0})end)e.MouseLeave:Connect(function()d(f,{Transparency=1})end)e.MouseButton1Down:Connect(function()d(f,{Color=b})end)e.MouseButton1Up:Connect(function()d(f,{Color=a})end)e.Activated:Connect(c[e.Text])end end end)